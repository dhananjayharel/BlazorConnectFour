#pragma checksum "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1acf1919658f4aa5003f6b888dee95b802e71a74"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorConnectFour.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/home/project/BlazorConnectFour/BlazorConnectFour/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/home/project/BlazorConnectFour/BlazorConnectFour/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/home/project/BlazorConnectFour/BlazorConnectFour/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/home/project/BlazorConnectFour/BlazorConnectFour/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/home/project/BlazorConnectFour/BlazorConnectFour/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/home/project/BlazorConnectFour/BlazorConnectFour/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/home/project/BlazorConnectFour/BlazorConnectFour/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/home/project/BlazorConnectFour/BlazorConnectFour/_Imports.razor"
using BlazorConnectFour;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/home/project/BlazorConnectFour/BlazorConnectFour/_Imports.razor"
using BlazorConnectFour.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
using BlazorConnectFour.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/connectfour")]
    public partial class ConnectFour : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<h1>ConnectFour</h1>\n\n\n\n");
#nullable restore
#line 137 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
 if (winner == PieceColor.Blank)
{

#line default
#line hidden
#nullable disable
            __builder.AddContent(1, "    ");
            __builder.OpenElement(2, "h2");
            __builder.AddContent(3, 
#nullable restore
#line 139 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
         currentTurn

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(4, "\'s Turn!");
            __builder.CloseElement();
            __builder.AddMarkupContent(5, "\n");
#nullable restore
#line 140 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"

}
else
{

#line default
#line hidden
#nullable disable
            __builder.AddContent(6, "    ");
            __builder.OpenElement(7, "h2");
            __builder.AddContent(8, 
#nullable restore
#line 144 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
         winner

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(9, " Wins! ");
            __builder.OpenElement(10, "button");
            __builder.AddAttribute(11, "class", "btn btn-success");
            __builder.AddAttribute(12, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 144 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
                                                                  () => Reset()

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(13, "Reset");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(14, "\n");
#nullable restore
#line 145 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
}

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(15, "\n");
            __builder.OpenElement(16, "div");
            __builder.AddAttribute(17, "class", "board");
            __builder.AddMarkupContent(18, "\n");
#nullable restore
#line 148 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
     for (int i = 0; i < 7; i++)
    {

#line default
#line hidden
#nullable disable
            __builder.AddContent(19, "        ");
            __builder.OpenElement(20, "div");
            __builder.AddAttribute(21, "class", "column");
            __builder.AddMarkupContent(22, "\n");
#nullable restore
#line 151 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
             for (int j = 0; j < 6; j++)
            {
                int x = i;
                int y = j;

#line default
#line hidden
#nullable disable
            __builder.AddContent(23, "                ");
            __builder.OpenElement(24, "div");
            __builder.AddAttribute(25, "class", "gamepiece" + "\n                     " + (
#nullable restore
#line 156 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
                      board.Board[i,j].Color.ToString().ToLower()

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(26, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 156 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
                                                                               () => PieceClicked(x,y)

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(27, "\n");
#nullable restore
#line 157 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
            }

#line default
#line hidden
#nullable disable
            __builder.AddContent(28, "        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(29, "\n");
#nullable restore
#line 159 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 6 "/home/project/BlazorConnectFour/BlazorConnectFour/Pages/ConnectFour.razor"
       

    GameBoard board = new GameBoard();
    PieceColor currentTurn = PieceColor.Red;
    PieceColor winner = PieceColor.Blank;

    private void PieceClicked(int x, int y)
    {
        if (winner != PieceColor.Blank) { return; }

        GamePiece clickedSpace = board.Board[x, y];

        //The piece must "fall" to the lowest unoccupied space in the clicked column
        if (clickedSpace.Color == PieceColor.Blank)
        {
            while (y < 5)
            {
                GamePiece nextSpace = board.Board[x, y + 1];

                y = y + 1;
                if (nextSpace.Color == PieceColor.Blank)
                {
                    clickedSpace = nextSpace;
                }
            }
            clickedSpace.Color = currentTurn;

        }

        winner = GetWinner();
        if (winner == PieceColor.Blank)
        {
            SwitchTurns();
        }

    }
    private void SwitchTurns()
    {
        if (currentTurn == PieceColor.Red)
        {
            currentTurn = PieceColor.Yellow;
        }
        else
        {
            currentTurn = PieceColor.Red;
        }
    }

    private enum EvaluationDirection
    {
        Up,
        UpRight,
        Right,
        DownRight
    }
    private PieceColor GetWinner()
    {
        PieceColor winnerColor = PieceColor.Blank;

        for (int i = 0; i < 7; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                PieceColor winner = EvaluatePieceForWinner(i, j, EvaluationDirection.Up);
                if (winner != PieceColor.Blank) { return winner; }

                winner = EvaluatePieceForWinner(i, j, EvaluationDirection.UpRight);
                if (winner != PieceColor.Blank) { return winner; }

                winner = EvaluatePieceForWinner(i, j, EvaluationDirection.Right);
                if (winner != PieceColor.Blank) { return winner; }

                winner = EvaluatePieceForWinner(i, j, EvaluationDirection.DownRight);
                if (winner != PieceColor.Blank) { return winner; }
            }
        }

        return winnerColor;

    }
    private PieceColor EvaluatePieceForWinner(int i, int j, EvaluationDirection dir)
    {
        GamePiece currentPiece = board.Board[i, j];
        if (currentPiece.Color == PieceColor.Blank)
        {
            return PieceColor.Blank;
        }

        int inARow = 1;
        int iNext = i;
        int jNext = j;
        while (inARow < 4)
        {
            switch (dir)
            {
                case EvaluationDirection.Up:
                    jNext = jNext - 1;
                    break;
                case EvaluationDirection.UpRight:
                    iNext = iNext + 1;
                    jNext = jNext - 1;
                    break;
                case EvaluationDirection.Right:
                    iNext = iNext + 1;
                    break;
                case EvaluationDirection.DownRight:
                    iNext = iNext + 1;
                    jNext = jNext + 1;
                    break;
            }
            if (iNext < 0 || iNext >= 7 || jNext < 0 || jNext >= 6) { break; }
            if (board.Board[iNext, jNext].Color == currentPiece.Color)
            {
                inARow++;
            }
            else
            {
                return PieceColor.Blank;
            }
        }
        return inARow >= 4 ? currentPiece.Color : PieceColor.Blank;
    }
    private void Reset()
    {
        board = new GameBoard();
        currentTurn = PieceColor.Red;
        winner = PieceColor.Blank;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
