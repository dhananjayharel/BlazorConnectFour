@page "/connectfour"
@using BlazorConnectFour.Data;

<h1>ConnectFour</h1>

@code {

    GameBoard board = new GameBoard();
    PieceColor currentTurn = PieceColor.Red;
    PieceColor winner = PieceColor.Blank;

    private void PieceClicked(int x, int y)
    {
        if (winner != PieceColor.Blank) { return; }

        GamePiece clickedSpace = board.Board[x, y];

        //The piece must "fall" to the lowest unoccupied space in the clicked column
        if (clickedSpace.Color == PieceColor.Blank)
        {
            while (y < 5)
            {
                GamePiece nextSpace = board.Board[x, y + 1];

                y = y + 1;
                if (nextSpace.Color == PieceColor.Blank)
                {
                    clickedSpace = nextSpace;
                }
            }
            clickedSpace.Color = currentTurn;

        }

        winner = GetWinner();
        if (winner == PieceColor.Blank)
        {
            SwitchTurns();
        }

    }
    private void SwitchTurns()
    {
        if (currentTurn == PieceColor.Red)
        {
            currentTurn = PieceColor.Yellow;
        }
        else
        {
            currentTurn = PieceColor.Red;
        }
    }

    private enum EvaluationDirection
    {
        Up,
        UpRight,
        Right,
        DownRight
    }
    private PieceColor GetWinner()
    {
        PieceColor winnerColor = PieceColor.Blank;

        for (int i = 0; i < 7; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                PieceColor winner = EvaluatePieceForWinner(i, j, EvaluationDirection.Up);
                if (winner != PieceColor.Blank) { return winner; }

                winner = EvaluatePieceForWinner(i, j, EvaluationDirection.UpRight);
                if (winner != PieceColor.Blank) { return winner; }

                winner = EvaluatePieceForWinner(i, j, EvaluationDirection.Right);
                if (winner != PieceColor.Blank) { return winner; }

                winner = EvaluatePieceForWinner(i, j, EvaluationDirection.DownRight);
                if (winner != PieceColor.Blank) { return winner; }
            }
        }

        return winnerColor;

    }
    private PieceColor EvaluatePieceForWinner(int i, int j, EvaluationDirection dir)
    {
        GamePiece currentPiece = board.Board[i, j];
        if (currentPiece.Color == PieceColor.Blank)
        {
            return PieceColor.Blank;
        }

        int inARow = 1;
        int iNext = i;
        int jNext = j;
        while (inARow < 4)
        {
            switch (dir)
            {
                case EvaluationDirection.Up:
                    jNext = jNext - 1;
                    break;
                case EvaluationDirection.UpRight:
                    iNext = iNext + 1;
                    jNext = jNext - 1;
                    break;
                case EvaluationDirection.Right:
                    iNext = iNext + 1;
                    break;
                case EvaluationDirection.DownRight:
                    iNext = iNext + 1;
                    jNext = jNext + 1;
                    break;
            }
            if (iNext < 0 || iNext >= 7 || jNext < 0 || jNext >= 6) { break; }
            if (board.Board[iNext, jNext].Color == currentPiece.Color)
            {
                inARow++;
            }
            else
            {
                return PieceColor.Blank;
            }
        }
        return inARow >= 4 ? currentPiece.Color : PieceColor.Blank;
    }
    private void Reset()
    {
        board = new GameBoard();
        currentTurn = PieceColor.Red;
        winner = PieceColor.Blank;
    }
}


@if (winner == PieceColor.Blank)
{
    <h2>@currentTurn's Turn!</h2>

}
else
{
    <h2>@winner Wins! <button class="btn btn-success" @onclick="@(() => Reset())">Reset</button></h2>
}

<div class="board">
    @for (int i = 0; i < 7; i++)
    {
        <div class="column">
            @for (int j = 0; j < 6; j++)
            {
                int x = i;
                int y = j;
                <div class="gamepiece
                     @board.Board[i,j].Color.ToString().ToLower()" @onclick="@(() => PieceClicked(x,y))"></div>
            }
        </div>
    }
</div>

